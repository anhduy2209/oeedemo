@page "/performance"
@inject HttpClient HttpClient
@using System.Text.Json

<MudMainContent Class="pt-16 px-4">
    <MudText Typo="Typo.h5" Class="mb-4 text-primary font-weight-bold mud-typography-h5 mud-typography-sm-h6">
        üìà Performance Overview -
        <MudSelect T="string"
                   @bind-Value="SelectedStation"
                   Dense="true"
                   Label="Ch·ªçn tr·∫°m"
                   Class="ml-2 station-select">
            @if (StationOptions.Count == 0)
            {
                <MudSelectItem T="string" Disabled="true">
                    <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Medium" Class="mr-2"/>
                    ƒêang t·∫£i...
                </MudSelectItem>
            }
            else
            {
                @foreach (var station in StationOptions)
                {
                    <MudSelectItem T="string" Value="@station">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-1 text-secondary"/>
                        @station
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true"/>
        <MudText Class="mt-2 text-muted">ƒêang t·∫£i th√¥ng tin c√¥ng vi·ªác...</MudText>
    }
    else if (runningJob != null)
    {
        <MudPaper Elevation="5" Class="p-4 my-5">
            <MudText Typo="Typo.h6" Class="mb-3 text-muted">üöÄ Job ƒëang ch·∫°y</MudText>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText><b>üìç Tr·∫°m:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Default"
                                 Variant="Variant.Filled">@runningJob.StationName</MudChip>
                    </MudText>
                    <MudText><b>üì¶ M√£ SP:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Info"
                                 Variant="Variant.Filled">@runningJob.ProductCode</MudChip>
                    </MudText>
                    <MudText><b>üïò Ca:</b>
                        <MudChip T="string" Color="@GetShiftColor(runningJob.Shift)"
                                 Variant="Variant.Filled">@runningJob.Shift</MudChip>
                    </MudText>
                    <MudText><b>‚öôÔ∏è Tr·∫°ng th√°i:</b>
                        <MudChip T="string" Color="@GetStatusColor(runningJob.JobStatus)"
                                 Variant="Variant.Filled">@runningJob.JobStatus</MudChip>
                    </MudText>
                    <MudText><b>üìÖ Th·ªùi gian t·∫°o:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Info"
                                 Variant="Variant.Filled">@runningJob.CreatedTime.ToString("dd/MM/yyyy HH:mm")</MudChip>
                    </MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText><b>üìã K·∫ø ho·∫°ch:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">@runningJob.PlanQty</MudChip>
                    </MudText>
                    <MudText><b>‚úÖ Th·ª±c t·∫ø:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Success"
                                 Variant="Variant.Filled">@runningJob.ActualQty</MudChip>
                    </MudText>
                    <MudText><b>‚ùå L·ªói:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Error" Variant="Variant.Filled">@runningJob.DefectQty</MudChip>
                    </MudText>
                    <MudText><b>üìä OEE:</b>
                        <MudChip T="string" Color="MudBlazor.Color.Secondary"
                                 Variant="Variant.Filled">@runningJob.Oee.ToString("0.##")%
                        </MudChip>
                    </MudText>
                    <MudText><b>‚ö° Performance (P):</b>
                        <MudChip T="string" Color="MudBlazor.Color.Success" Variant="Variant.Filled">
                            @_performanceDisplay
                        </MudChip>
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <MudText Class="text-danger">Kh√¥ng c√≥ job n√†o ƒëang ch·∫°y t·∫°i tr·∫°m n√†y.</MudText>
    }
</MudMainContent>

@code {
    private string? _selectedStation;

    private string? SelectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                if (_selectedStation != null)
                {
                    _ = LoadRunningJob(_selectedStation);
                }
            }
        }
    }

    private List<string> StationOptions = new();
    private RunningJob? runningJob;
    private WorkingParameter? workingParameter;
    private DowntimeEntry? downtimeEntry;
    private double _performance;
    private string _performanceDisplay = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu";
    private bool isLoading = false;
    private readonly double _totalAvailableTime = 480; // 8 gi·ªù ca l√†m vi·ªác (ph√∫t)

    protected override async Task OnInitializedAsync()
    {
        await LoadStationOptions();
        if (StationOptions.Any())
        {
            SelectedStation = StationOptions.First();
        }
    }

    private async Task LoadStationOptions()
    {
        try
        {
            var result = await HttpClient.GetFromJsonAsync<List<Station>>("https://demo-hwaseung.spiderock.xyz/api/Station/All");
            if (result is not null && result.Any())
            {
                StationOptions = result.Select(s => s.StationCode).ToList();
            }
            else
            {
                StationOptions = new() { "HT09" };
            }
        }
        catch
        {
            StationOptions = new() { "HT09" };
        }
    }

    private async Task LoadRunningJob(string station)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Reset d·ªØ li·ªáu
            runningJob = null;
            workingParameter = null;
            downtimeEntry = null;
            _performance = 0;
            _performanceDisplay = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu";

            // L·∫•y d·ªØ li·ªáu job
            var jobResponse = await HttpClient.GetAsync($"https://demo-hwaseung.spiderock.xyz/api/Job/GetRunningJob?station={station}");
            if (jobResponse.IsSuccessStatusCode)
            {
                var jobJson = await jobResponse.Content.ReadAsStringAsync();
                runningJob = JsonSerializer.Deserialize<RunningJob>(jobJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (runningJob != null)
                {
                    // L·∫•y d·ªØ li·ªáu working parameter
                    var productCode = string.IsNullOrEmpty(runningJob.ProductCode) ? "LIGHTBLAZE_A-JS0913" : runningJob.ProductCode;
                    var paramResponse = await HttpClient.GetAsync($"https://demo-hwaseung.spiderock.xyz/api/WorkingParameter?station={station}&product={productCode}");
                    if (paramResponse.IsSuccessStatusCode)
                    {
                        var paramJson = await paramResponse.Content.ReadAsStringAsync();
                        workingParameter = JsonSerializer.Deserialize<WorkingParameter>(paramJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }

                    // L·∫•y d·ªØ li·ªáu downtime
                    var downtimeResponse = await HttpClient.GetAsync($"https://demo-hwaseung.spiderock.xyz/api/DowntimeInput/ByWorkDate?station={station}");
                    if (downtimeResponse.IsSuccessStatusCode)
                    {
                        var downtimeJson = await downtimeResponse.Content.ReadAsStringAsync();
                        var downtimeEntries = JsonSerializer.Deserialize<List<DowntimeEntry>>(downtimeJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        downtimeEntry = downtimeEntries?.FirstOrDefault();
                    }

                    // T√≠nh Performance
                    if (runningJob.ActualQty > 0 && workingParameter != null && workingParameter.StandardCycle > 0)
                    {
                        // T√≠nh Operating Time
                        double lossTimeMinutes = 0;
                        if (downtimeEntry != null && TimeSpan.TryParse(downtimeEntry.LossTime, out var lossTime))
                        {
                            lossTimeMinutes = lossTime.TotalMinutes;
                        }

                        double operatingTime = _totalAvailableTime - lossTimeMinutes;

                        // T√≠nh Ideal Output
                        double idealOutput = (operatingTime * 60) / workingParameter.StandardCycle; // StandardCycle l√† gi√¢y/s·∫£n ph·∫©m

                        // T√≠nh Performance
                        _performance = (runningJob.ActualQty / idealOutput) * 100;
                        _performanceDisplay = _performance.ToString("0.##") + "%";
                    }
                    else if (runningJob.PlanQty > 0)
                    {
                        // Fallback: S·ª≠ d·ª•ng PlanQty n·∫øu kh√¥ng c√≥ StandardCycle
                        _performance = (runningJob.ActualQty / runningJob.PlanQty) * 100;
                        _performanceDisplay = _performance.ToString("0.##") + "%";
                    }
                }
            }
        }
        catch
        {
            runningJob = null;
            _performanceDisplay = "L·ªói t·∫£i d·ªØ li·ªáu";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private MudBlazor.Color GetShiftColor(string shift) => shift switch
    {
        "Ca S√°ng" => MudBlazor.Color.Primary,
        "Ca Tr∆∞a" => MudBlazor.Color.Warning,
        "Ca Chi·ªÅu" => MudBlazor.Color.Dark,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetStatusColor(string status) => status switch
    {
        "ƒêang ch·ªù" => MudBlazor.Color.Secondary,
        "ƒêang ch·∫°y" => MudBlazor.Color.Success,
        "ƒê√£ ho√†n th√†nh" => MudBlazor.Color.Info,
        "Ch∆∞a xong" => MudBlazor.Color.Error,
        _ => MudBlazor.Color.Dark
    };

    public class Station
    {
        public required string StationCode { get; set; }
        public required string StationName { get; set; }
    }

    public class RunningJob
    {
        public required string StationCode { get; init; }
        public required string StationName { get; init; }
        public required string ProductCode { get; init; }
        public required string JobStatus { get; init; }
        public required string Shift { get; init; }
        public DateTimeOffset CreatedTime { get; init; }
        public double PlanQty { get; init; }
        public double ActualQty { get; init; }
        public double DefectQty { get; init; }
        public double Oee { get; init; }
    }

    public class WorkingParameter
    {
        public List<object> Tools { get; init; } = new();
        public required string StationCode { get; init; }
        public required string ProductCode { get; init; }
        public required string ComponentCode { get; init; }
        public double DefaultQtyPerSignal { get; init; }
        public double StandardCycle { get; init; }
        public double TaktTime { get; init; }
        public double ProductPerHour { get; init; }
        public double DefaultQtyPerShift { get; init; }
        public double StandardOee { get; init; }
        public int StopMeaningTime { get; init; }
        public List<object> CheckList { get; init; } = new();
        public int ChangeOverTime { get; init; }
    }

    public class DowntimeEntry
    {
        public required string Id { get; set; }
        public required string StationCode { get; set; }
        public required string DowntimeCode { get; set; }
        public required string StartTime { get; set; }
        public required string EndTime { get; set; }
        public required string Status { get; set; }
        public required string LossTime { get; set; }
    }
}