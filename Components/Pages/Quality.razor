@page "/quality"
@inject HttpClient HttpClient

<MudMainContent Class="pt-16 px-4">
    <MudText Typo="Typo.h5" Class="mb-4 text-primary font-weight-bold mud-typography-h5 mud-typography-sm-h6">
        üß™ Quality Information for Station: <strong>@(SelectedStation ?? "ƒêang t·∫£i...")</strong>
    </MudText>

    <MudSelect T="string"
               @bind-Value="SelectedStation"
               Dense="true"
               Label="Ch·ªçn tr·∫°m"
               Class="mb-4"
               Style="width: 150px;">
        @if (StationOptions.Count == 0)
        {
            <MudSelectItem T="string" Disabled="true">ƒêang t·∫£i...</MudSelectItem>
        }
        else
        {
            @foreach (var station in StationOptions)
            {
                <MudSelectItem Value="@station">@station</MudSelectItem>
            }
        }
    </MudSelect>

    @if (!string.IsNullOrEmpty(_errMsg))
    {
        <MudAlert Severity="Severity.Error">@_errMsg</MudAlert>
    }

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Large"/>
        <MudText Class="mt-2 text-muted">ƒêang t·∫£i th√¥ng tin c√¥ng vi·ªác...</MudText>
    }
    else if (_runningJob != null)
    {
        <MudPaper Elevation="4" Class="p-4 mb-4">
            <MudText Typo="Typo.h5" Class="mb-3">üìã Job & Quality Summary</MudText>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText><strong>Station:</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Secondary">@_runningJob.StationName</MudChip>
                    </MudText>
                    <MudText><strong>Product Code:</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Info">@_runningJob.ProductCode</MudChip>
                    </MudText>
                    <MudText><strong>Shift:</strong>
                        <MudChip T="string" Color="@GetShiftColor(_runningJob.Shift)">@_runningJob.Shift</MudChip>
                    </MudText>
                    <MudText><strong>Job Status:</strong>
                        <MudChip T="string"
                                 Color="@GetJobStatusColor(_runningJob.JobStatus)">@_runningJob.JobStatus</MudChip>
                    </MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText><strong>Plan Quality</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Primary">@_runningJob.PlanQty.ToString("N0")</MudChip>
                    </MudText>
                    <MudText><strong>Actual Quality</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Success">@_runningJob.ActualQty</MudChip>
                    </MudText>
                    <MudText><strong>Defect Quality</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Error">@_runningJob.DefectQty</MudChip>
                    </MudText>
                    <MudText><strong>Performance (P):</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Success">@_performance.ToString("0.##")%</MudChip>
                    </MudText>
                    <MudText><strong>Quality (Q):</strong>
                        <MudChip T="string" Color="MudBlazor.Color.Warning">@_quality.ToString("0.##")%</MudChip>
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <MudText Class="text-danger">Kh√¥ng c√≥ job n√†o ƒëang ch·∫°y t·∫°i tr·∫°m n√†y.</MudText>
    }
</MudMainContent>

@code {
    private string? _selectedStation;

    private string? SelectedStation
    {
        get => _selectedStation;
        set
        {
            if (_selectedStation != value)
            {
                _selectedStation = value;
                if (_selectedStation != null)
                {
                    _ = LoadRunningJob(_selectedStation);
                }
            }
        }
    }

    private List<string> StationOptions = new();
    private RunningJob? _runningJob;
    private double _performance;
    private double _quality;
    private string? _errMsg;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStationOptions();
        if (StationOptions.Any())
        {
            SelectedStation = StationOptions.First();
        }
    }

    private async Task LoadStationOptions()
    {
        try
        {
            var result = await HttpClient.GetFromJsonAsync<List<Station>>("https://demo-hwaseung.spiderock.xyz/api/Station/All");
            if (result is not null && result.Any())
            {
                StationOptions = result.Select(s => s.StationCode).ToList();
            }
            else
            {
                StationOptions = new() { "HT09" };
            }
        }
        catch
        {
            StationOptions = new() { "HT09" };
            _errMsg = "Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·∫°m t·ª´ m√°y ch·ªß.";
        }
    }

    private async Task LoadRunningJob(string station)
    {
        try
        {
            isLoading = true;
            _errMsg = null;
            StateHasChanged();

            var response = await HttpClient.GetAsync($"https://demo-hwaseung.spiderock.xyz/api/Job/GetRunningJob?station={station}");

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                _runningJob = JsonSerializer.Deserialize<RunningJob>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (_runningJob?.PlanQty > 0)
                    _performance = CalculatePerformance(_runningJob.PlanQty, _runningJob.ActualQty);

                if (_runningJob?.ActualQty > 0)
                    _quality = CalculateQuality(_runningJob.ActualQty, _runningJob.DefectQty);
                else
                    _quality = 0;
            }
            else
            {
                _runningJob = null;
                _errMsg = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu job t·ª´ m√°y ch·ªß.";
            }
        }
        catch
        {
            _runningJob = null;
            _errMsg = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau!";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private double CalculatePerformance(double planQty, double actualQty)
        => planQty > 0 ? (actualQty / planQty) * 100 : 0;

    private double CalculateQuality(double actualQty, double defectQty)
        => actualQty > 0 ? ((actualQty - defectQty) / actualQty) * 100 : 0;

    private MudBlazor.Color GetShiftColor(string shift) => shift switch
    {
        "Ca S√°ng" => MudBlazor.Color.Primary,
        "Ca Tr∆∞a" => MudBlazor.Color.Warning,
        "Ca Chi·ªÅu" => MudBlazor.Color.Secondary,
        _ => MudBlazor.Color.Default
    };

    private MudBlazor.Color GetJobStatusColor(string status) => status switch
    {
        "ƒêang ch·ªù" => MudBlazor.Color.Default,
        "ƒêang ch·∫°y" => MudBlazor.Color.Success,
        "ƒê√£ ho√†n th√†nh" => MudBlazor.Color.Info,
        "Ch∆∞a xong" => MudBlazor.Color.Error,
        _ => MudBlazor.Color.Dark
    };

    public class Station
    {
        public string StationCode { get; set; } = string.Empty;
        public string StationName { get; set; } = string.Empty;
    }

    public class RunningJob
    {
        public required string StationCode { get; init; }
        public required string StationName { get; init; }
        public required string ProductCode { get; init; }
        public required string JobStatus { get; init; }
        public required string Shift { get; init; }
        public double PlanQty { get; init; }
        public double ActualQty { get; init; }
        public double DefectQty { get; init; }
        public double Oee { get; init; }
    }

}